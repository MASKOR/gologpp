/*************************************************************************
 * This file is part of golog++.
 *
 * golog++ is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * golog++ is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR a PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with golog++.  If not, see <https://www.gnu.org/licenses/>.
**************************************************************************/

symbol domain Block = {a, b, c}
symbol domain Location = Block | {table}
symbol domain Poi = { table, Home }

Location fluent loc(Block x) {
initially:
	(a) = c;
	(b) = table;
	(c) = b;
}

action stack(Block x, Location y) {
precondition:
	  x != y // Can't stack x on x
	& x != table // Can't stack table
	& loc(x) != y // Can't stack the same thing twice
	& (!exists(Block z) loc(z) == x) // Nothing is on x
	& (
		y == table // either y is the table...
		| !exists(Block z) loc(z) == y // or nothing is on y
	)

effect:
	loc(x) = y;
duration: [2, 4]
}


action go_to(Poi p)
{ duration: [0, 20] }

action position_precisely(Poi p)
{ duration: [2, 8] }

bool function goal() =
	loc(a) == table & loc(b) == a & loc(c) == b


bool function postcond() = goal()


number function reward() =
	if (goal())
		100
	else
		-1

component depth_cam {
clocks:
	bcl
states:
	off, boot(bcl <= 4), on
transitions:
	off => boot resets(bcl),
	boot ->(bcl >= 2) on,
	on => off,
	error => off
}

constraints {
	during(stack(*,*)): state(depth_cam) = on;
	during(go_to(*)): state(depth_cam) = off;
}


procedure main() {
	solve(14, reward()) {
		go_to(table);
		position_precisely(table);
		while (!goal())
			pick (Block x in {a, b, c})
				pick(Location y in {table, a, b, c})
					stack(x, y);
		go_to(Home);
	}
}
