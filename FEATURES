GologPP Features:

No compile-time dependency on implementation
-> Separate source trees, implementation depends on object model, NOT vice-versa

Parsing and AST instantiation also independent of implementation
  In fact, object model can be fully instantiatied even without an implementation being defined

Multiple, independent inheritance hierarchies governing syntactic & semantic (implementation) interfaces

Currently:
N robot platforms, M golog implementations -> N*M platform interfaces
With GologPP:
N GologPP-Platform interfaces + M GologPP implementations!

Safe extensibility: If new language elements are introduced, they are handled generically. Where explicit handling is needed, failure to do so will generate a compiler error.

Perfect separation of Syntactic model and implementation. The syntactic model describes NOTHING BUT the syntactic-referential structure of a program, while the implementation does NOTHING BUT implementing the semantics of each element.

Maximum type safety within the implementation, Language types as template arguments reflect language type semantics

Use the right tool for the job:
C++ for metamodeling, interfacing, embedding, control flow & static consistency checking (of the metamodel, its usage as well as on the target language code)
Backend language (like Prolog) for language semantics.
