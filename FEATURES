GologPP Features:

Situation in the Golog ecosystem:
Lots of different implementations, each with unique and valuable features, strengths, weaknesses.
However porting a feature can be tedious work due to the invasive way it was implemented, often because of missing extension points. As it stands, Golog is not the complement it could be to ontologic languages since the ecosystem does not share the coherence provided e.g. by the OWL2 specification.

Want a simple and extensible language specification that can cover arbitrary features.

Currently:
 N robot platforms, M golog implementations -> N*M platform interfaces
With GologPP:
 N GologPP-Platform interfaces + M GologPP implementations!

Safe extensibility: If new language elements are introduced, they are handled generically. Where explicit handling is needed, failure to do so will generate a compiler error.

Maximum type safety within the implementation, Language types as template arguments reflect language type semantics

Use the right tool for the job:
C++ for metamodeling, interfacing, embedding, control flow & static consistency checking (of the metamodel, its usage as well as on the target language code)
Backend language (like Prolog) for language semantics.

Each element of a program owns an instance of its implementation: Can represent implementation-specific (compile-time or runtime) state if need be.

Implementation-agnostic language model:
- Can compile into bytecode, can interpret or compile into Prolog/Readylog/Indigolog...
- No compile-time dependency on implementation
- Implementation depends on object model, NOT vice-versa
- Parsing and AST instantiation also independent of implementation
-> In fact, object model can be fully instantiatied even without an implementation being defined

independent, but statically linked inheritance hierarchies governing syntactic & semantic (implementation) interfaces

Intuitive & strict separation of concerns:
Cheap implementation

Perfect separation of Syntactic model and implementation. The syntactic model describes NOTHING BUT the syntactic-referential structure of a program, while the implementation does NOTHING BUT implementing the semantics of each element.

Tool support and Usability:
Enable code browsing, static consistency checking, auto completion and detection of common programming mistakes.

Dynamically control implementation details on a loaded program
- Can inspect object model after parsing and customize implementations based on required features

