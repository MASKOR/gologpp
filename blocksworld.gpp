§fluent loc(§x) {
initially:
	(a) = c;
	(b) = table;
	(c) = b;
// 	(d) = a;
}

action stack(§x, §y) {
precondition:
	  §x != §y // Can't stack x on x
	& §x != table // Can't stack table
	& loc(§x) != §y // Can't stack the same thing twice
	& !exists(§z) loc(§z) == §x // Nothing is on x
	& (
		§y == table // either y is the table...
		| !exists(§z) loc(§z) == §y // or nothing is on y
	)

effect:
	loc(§x) = §y;
}


?function goal() {
	return loc(a) == table & loc(b) == a & loc(c) == b
// 	& loc(d) == c
	;
}

%function reward() {
	if (goal())
		return 100;
	else
		return -1;
}


{
	solve(6, reward())
		while (!goal())
			pick (§x in {a, b, c})
				pick(§y in {table, a, b, c})
					stack(§x, §y);
}
